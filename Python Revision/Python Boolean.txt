Boolean values are either True or False, whenever two values are compared Python compasres and then returns a boolean answer.

Example:

print(10 == 9) #Prints, False
print(10 > 9) #Prints, True
print(10 < 9) #Prints, False





When you compare two values in an if statement Python finds the boolean answer and will act on if the statement is true or false.

Example:

a = 20
b = 30

if b > a:
    print("Wow b is more than a") #Prints, Wow b is more than a
else:
    print("b is less than a!")





The bool() function allows you to evaluate any value and can provide a True or False.

Example:

print(bool("nice")) #Prints, True
print(bool(10)) #Prints, True





Almost every value is considered true, every value is considered true unless it is empty or it is 0.

Example:

print(bool("Joseph")) #Prints, True
print(bool(['Nice', 'Pog', 'Hello!']))  #Prints, True
print(bool(123))  #Prints, True





Only empty values will return False.

Example:

print(bool(False)) #Prints, False
print(bool(None))  #Prints, False
print(bool(0))  #Prints, False
print(bool(""))  #Prints, False
print(bool(()))  #Prints, False
print(bool([]))  #Prints, False
print(bool({}))  #Prints, False




It is possible to create functions that return a boolean value.

Example:

def myFunc():
    return True

print(myFunc())




You can execute code based on the boolean value of a function.

Example:

def myFunc():
    return True

if myFunc():
    print("It's True!") #Prints, It's True!
else:
    print("It's False!")





You can also use a function such as isinstance to tell if an object is a certain data type.

Example:

x = 23
print(isinstance(x, int)) #Print, True
