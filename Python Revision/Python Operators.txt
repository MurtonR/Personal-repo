Operators are used to preform operations on variables and values.

Operators are divided into many categories.

Arithmetic operators
Assignment operators
Comparison operators
Logical operators
Identity operators
Membership operators
Bitwise operators



Here are all the Arithmetic operators, they are used with numeric values to preform common mathematical operations.

Operator	Name	                Example	
+       	Addition        	x + y	
-	        Subtraction     	x - y	
*       	Multiplication  	x * y	
/       	Division        	x / y	
%       	Modulus         	x % y   #The remainder when x is divided by y
**      	Exponentiation  	x ** y	#This is x to the power of y
//      	Floor division  	x // y  #Rounds the number down to the nearest whole number, still divides





Assignment operators are used to assign values to variables.


Operator	Example 	        Same As	
=          	x = 5	                x = 5	
+=      	x += 3	                x = x + 3	
-=         	x -= 3          	x = x - 3	
*=        	x *= 3             	x = x * 3	
/=       	x /= 3          	x = x / 3	
%=      	x %= 3          	x = x % 3	
//=       	x //= 3	                x = x // 3	
**=     	x **= 3         	x = x ** 3	
&=      	x &= 3            	x = x & 3 #How many times 3 fits into x	
|=       	x |= 3          	x = x | 3	
^=	        x ^= 3              	x = x ^ 3	
>>=	        x >>= 3         	x = x >> 3	
<<=     	x <<= 3           	x = x << 3





Comparison operators can be used to compare two values.

Operator	Name	      			Example
==      	Equal                        	x == y	
!=      	Not equal                	x != y	
>       	Greater than               	x > y	
<       	Less than                	x < y	
>=      	Greater than or equal to	x >= y	
<=      	Less than or equal to     	x <= y	







Logical operators can be used to combine conditional statements.

Operator	Description							Example	
and 		Returns True if both statements are true			x < 5 and  x < 10	
or		Returns True if one of the statements is true			x < 5 or x < 4	
not		Reverse the result, returns False if the result is true	        not(x < 5 and x < 10)






Identity operators are used to compare objects, however not to check they are equal, but that they are the same object, with the same memory location.


Operator	Description							Example	
is 		Returns True if both variables are the same object		x is y	
is not		Returns True if both variables are not the same object		x is not y






Membership operators test if a sequence is present within an object.

Operator	Description										Example	
in 		Returns True if a sequence with the specified value is present in the object		x in y	
not in		Returns True if a sequence with the specified value is not present in the object	x not in y






Bitwise operators are used to compare binary numbers.

Operator	Name	Description						Example	
& 		AND	Sets each bit to 1 if both bits are 1			x & y	
|		OR	Sets each bit to 1 if one of two bits is 1		x | y	
^		XOR	Sets each bit to 1 if only one of two bits is 1		x ^ y	
~		NOT	Inverts all the bits					~x	

<<  Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall of   x << 2

>>  Signed right shift	Shift right by pushing the leftmost bit in from the left, and let the rightmost bits fall off	                            
     x >> 2




Operator precedence describes the order in which operations are done the top operations take precedence over the ones below, if two operations have the same precedence then it is read left to right.

Operator						Description	
()							Parentheses	
**							Exponentiation	
+x  -x  ~x						Unary plus, unary minus, and bitwise NOT	
*  /  //  %						Multiplication, division, floor division, and modulus	
+  -							Addition and subtraction	
<<  >>							Bitwise left and right shifts	
&							Bitwise AND	
^							Bitwise XOR	
|							Bitwise OR	
==  !=  >  >=  <  <=  is  is not  in  not in 		Comparisons, identity, and membership operators	
not							Logical NOT	
and							AND	
or							OR




Example:

print(5 + 4 - 3 + 7) #The computer reads this left to right.


