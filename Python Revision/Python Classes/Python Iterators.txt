An interator is an object that contains a countable number of values.

An interator is an object that can be iterated upon, meaning that you can traverse through all the values.

An iterator is an object that implements the iterator protocol, which consists of the methods __iter__() and __next__()




Lists, tuples, dictionaries and sets are iterable objects. They are iterable 'containers' which you can get an iterator from. All these objects have an iter() method which is used to get an iterator. Strings are also iterable objects, containing a sequence of characters.

Example:

mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)


print(next(myit)) #Prints, apple
print(next(myit)) #Prints, banana
print(next(myit)) #Prints, cherry



mystr = "apple"
myit = iter(mystr)

print(next(myit)) #Prints, a
print(next(myit)) #Prints, p
print(next(myit)) #Prints, p
print(next(myit)) #Prints, l
print(next(myit)) #Prints, e





We can also use a for loop to iterate through an iterable object. The for loop actually creates an iterator object and executes the next() method for each loop.

Example:

mytuple = ("apple", "banana", "cherry")

for x in mytuple:
    print(x)



mystr = "banana"

for x in mystr:
    print(x)




To create an object/class as an iterator you have to implement the methods __iter__() and __next__(), the __iter__() method acts similar, you can do operations (initialising etc.), but must always return the iterator object itself.

The __next__() method also allows you to do operations, and must return the next item in the sequence.

Example: 

class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))




To prevent the iteration from going on forever, we can use the StopIteration statement. In the __next__() method, we can add a terminating condition to raise an error if the iteration is done a specific number of times:

Example:

class MyNumbers:
    def __iter__(self):
        self.a = 1
        return self

    def __next__(self):
        if self.a <= 20:
            x = self.a
            self.a += 1
            return x
        else:
            raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
    print(x)





