The sort() method can be used in order to sort a list alphabetically in ascending order (a is first).

Example:

myList = ["Joe", "Biden", "Nice"]

myList.sort()

print(myList) #Prints, ['Biden', 'Joe', 'Nice']
 



It is possible to sort a list numerically from the smallest to the largest using sort().

Example:

myList = [3, 1, 5, 2, 4]

myList.sort()

print(myList) #Prints, ['1', '2', '3', '4', '5']





In order to sort the lists descending use reverse = True.

Example:

myList = [2, 4, 5, 1, 3]

myList.sort(reverse = True)

print(myList) #Prints, ['5', '4', '3', '2', '1']





It is possible to customise your own function by using the keyword argument key = function.

Example:

def myFunc(x):
    return abs(x-10)

myNum = [12, 14, 6, 2, 20]

myNum.sort(key = myFunc)

print(myNum) #Prints, [12, 14, 6, 2, 20]





The sort() method is case-sensitive so even if alphabetically a item is last because it starts with a capital it will be place first.

Example:

myList = ["a", "b", "c", "D"]

myList.sort()

print(myList) #Prints, ['D', 'a', 'b', 'c'] , even though a is before d in the alphabet "D" is first because of the capitilisation,




In order to make sort() case-insensitive the method str.lower() can be used.

Example:

myList = ["a", "b", "c", "D"]

myList.sort(key = str.lower)

print(myList) #Prints, ['a', 'b', 'c', 'D']





Using the reverse() method you can reverse the complete sorting order of the items.

Example:

myList = ["1", "2", "3", "4", "5"]

myList.reverse()

print(myList) #Prints, ["5", "4", "3", "2", "1"]
