A for loop is used for iterating a sequence, with the for loop you can execute a set of statement, once for each item in a list .

Example:

myList = ["Joe", "Biden", "Nice"]
for x in myList:
    print(x)




As strings are iterable objects they can be looped for much like a list or tuple.

Example:

myTxt = "Joe"
for x in myTxt:
    print(x)





Using the break statement we can end a loop before it has looped through all the items.

Example:

myList = ["Joe", "Biden", "Nice"]
for x in myList:
    if "c" in x:
        break
    print(x) #Prints, Joe Biden



myList = ["Joe", "Biden", "Nice"]
for x in myList:
    print(x)
    if "n" in x:
        break #Prints, Joe Biden






The continue keyword can be used to skip the current iteration and immediately begins the next iteration.

Example:

myTuple = ("Joe", "Biden", "Nice")
for x in myTuple:
    if "B" in x:
        continue 
    print(x) #Prints, Joe Nice





The range() function can be used to return a given sequence of numbers, using range(3) will print all the numbers from 0 to 2, by using range(2, 5) it will print from 2 to 4 as the end number is never included in the returned sequence of numbers. The normal range() function will return the numbers in increments of 1 however this can be change for example range(1, 21, 2) the third parameter determines how big each increment is.

Example:

for x in range(11):
    print(x) #Prints, 0 1 2 3 4 5 6 7 8 9 10



for x in range(0, 11):
    print(x) #Prints, 0 1 2 3 4 5 6 7 8 9 10



for x in range(0, 11, 2):
    print(x) #Prints, 0 2 4 6 8 10





The else keyword can be used in a for loop in order to specify a block of code to be executed when the original loop has ended.

Example:

myDict = {
    "Type": "Fruit",
    "Colour": "Red",
    "Name": "Apple",
}

for x in range(len(myDict)):
    print(x)
else:
    print("That's it!") #Prints, 0 1 2 That's it!
   


myList = ["Joe", "Biden", "Nice"]

for x in range(len(myList)):
    print(x)
else:
    print("That's it") #Prints, 0 1 2 That's it!



for x in range(0, 51, 5):
    print(x)
else:
    print("That's it!")






The code block after else will not be executed if the break statement is used.

Example:

for x in range(21):
    print(x)
    if x == 11:
  5      break
else:
    print("That's it!") #Prints, 0 1 2 3 4 5 6 7 8 9 10 11 , the code after the else statement is not executed even though the original statement has finished







A nested loop is a loop inside of a loop, the inner loop is executed once for each iteration of the outer loop.

Example:

myFruits = ["Apple", "Banana", "Grapes"]
myVeg = ["Carrot", "Potato", "Turnip"]

for x in myFruits:
   for y in myVeg:
       print(x,y) #For each of the iterations of myFruits, myVeg is executed fully once for example the first three returned values would be Apple Carrot
																	     Apple Potato
																             Apple Turnip






If there is no code after a for loop it will result in an error, the pass statement can be used in order to remove this issue.

Example:

for x in range(11):
    pass















