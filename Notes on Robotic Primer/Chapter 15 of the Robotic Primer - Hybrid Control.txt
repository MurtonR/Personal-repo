Hybrid Control:

'Hybrid control' means the combination of reactive and deliberate control within a single robot control system. In order for this to work fundmentalyy different controllers, time-scales (reactive short, deliberate long) and representations (reactive none, deliberate explicit and elaborate world models) must be made to work together effetively.

A hybrid system usually consists of three components:

-Reactive layer

-Planner

-Layer that links the above two together


Because there are usually three components hybrid architectures are often called "three-layer architectures" and hybrid systems "three-layer systems".



The middle layer is the real challenge due to how difficult its job is, it has to:

-Compensate for the limitations of the planner and reactive systems

-Reconcile their different time-scale

-Deal with their different representations (or lack of)

-Reconcile any contradictory commands they may send to the robot



For the purpose of highlighting when a hybrid system is optimal we can look at the example of a robot whose goal is to deliver medicine to patients in a hospital. This robot needs to be able to react quickly to unexpected obstacles, fast-moving people and any other objects that may appear in its path quickly. In order to do this it needs to have a robust reactive controller, however it also needs to be able to plan routes using a map and as such needs an internal model and planner. These require a deliberate system and as such a hybrid system would be optimal but it is more difficult than it seems.





Dealing with Changes in World/Map/Task:

When the reactive system discovers that it cannot do its job because of an obstacle it can inform the deliberate system, which will then be able to replan and update its internal representation of the world. This updating allows the robot to make accurate and up to date plans.





Planning and Replanning:

When the reactive planner discovers that it cannot proceed this can be used in order to send a signal to the deliberate layer to do some thinking, in order to generate a new plan. This is called dynamic replanning.

If the planner is computing while the robot is moving it may send a message to the reaction navigation layer to stop and turn before moving forward again, this is because it has discovered a better way to reach the desired goal.




Avoiding Replanning:

A good idea is to remember/store/save plans so that if that specific situation (initial and goal state) should occur again there is no replanning to do.

This idea has been used in the storing and reusing of mini plans in "contingency plans" which are used in a lookup table that tell the robot what to do (reactive) and the plan of how to do that (deliberate). This idea has also been called "intermediate-level actions" and "macro operators". Plans are computed either before or during a robot's life and stored for fast lookup when needed in the future.

Which system (reactive or deliberate) has priority depends entirely on the individual system and its goals, in some the deliberator's plan is "law" and always takes priority, in others the reactive system considers the deliberator's plans to be advice and can ignore it. In the most efficient systems the two systems are coupled with each being able to ignore and interrupt the other, for example the deliberate sytem may interrupt the reactive system if it believes it has a plan that is more efficient that the one already presented. On the flip side the reactive system can interrupt the planner if it finds that its intended path is blocked and it cannot find a way around the obstacle.





On-Line and Off-Line Planning:

It is a good idea to preplan for all the situations that may come up, this is  'off-line planning' takes place while the robot is being developed and does not have very much to be worried about.

Compare that to 'on-line plannin' where a busy robot has to worry about while it is trying to achieve its goals.


A 'universal plane' is a set of all possible plans for all initial states and goal states within the state space of a particular system. If a robot can have a pre-existing optimal plane for every possible situation then it is able to have both reactive and deliberate capabilities without any planning, this leads to a robot that is very reactive.

An additional feature of these precompiled plans is that informationc an be put into the system in a clean, principled way. This information about the robot, task and the environment is known as 'domain knowledge'. This allows the controller to use the premade plans as a set of real time reactive rules that can be looked up.


However this is too good to be true for real world robots:

-The state space is simply too large for most realistic problems so either generating or storing a universal plane is impossible.

-The world must not change at all, if it does then the new situations will not have a premade plan for them and as such will require planning and processing.

-The robot's goal must not change because if they do, atleast some of the rules need to change too, once again leading to more planning and processing.