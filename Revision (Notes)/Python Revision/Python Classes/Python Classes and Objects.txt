Python is an object oriented language, almost everything in python in an object with its properties and methods.

A class is like an object constructor, or a "Blueprint" for creating objects.



In order to create a class, use the keyword class:

Example:

class myClass:
    x = 5 

print(myClass) #Prints, <class '__main__.myClass'>




We can use the class called myClass to create objects.

Example:

class myClass:
    x = 5

myObj = myClass()

print(myObj.x) #Prints, 5




All classes have a function called "__init__" which is always executed when the class is being initiated. The __init__ function can be used to assign values to object properties, or other operations that are necessary to do when the object is being created.

Example:

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

Person1 = Person("Joe", 79)

print(Person1.name) #Prints, Joe
print(Person1.age) #Prints, 79





The "__str__()" function controls what should be returned when the class object is represented as a string. If the __str__() function is not set then the string representation of the object is returned.

Example:

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def __str__(self):
        return f"{self.name} {self.age}"


Person1 = Person("Joe", 79)

print(Person1) #Prints, Joe 79





Objects can also contain methods, however these are functions that belong to the object.

Example:

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def myFunction(self):
        print("Hello my name is " + self.name)



p1 = Person("Joe", 79)
p1.myFunction() #Prints, Hello my name is Joe





The "self" parameter is a reference to the current instance of the class and is used to access variables that belongs to the class. Additionally it does not need to be named "self" and can instead be named anything as long as it is the first parameter of any function in the class.

Example:

class Person:
    def __init__(Chicken, name, age):
        Chicken.name = name
        Chicken.age = age
    def myFunction(Chicken):
        print("Hello my name is " + Chicken.name)


p1 = Person("Joe", 79)
p1.myFunction() #Prints, Hello my name is Joe





You can modify properties on object like this.

Example:

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def myFunction(self):
        print("Hello my name is " + self.name)

p1 = Person("Joe", 79)
p1.name = "Trump"
p1.myFunction() #Prints, Hello my name is Trump







You can delete propertiess on objects by using the del keyword.

Example:

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)

del p1

print(p1) #Prints, NameError: name 'p1' is not defined



class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)

del myfunc

print(p1.myfunc) #Prints, AttributeError: 'Person' object has no attribute 'myfunc'


If for some reason you have a class definition with no content the pass statement can be used to avoid getting an error.

Example:

class Person:
    pass





