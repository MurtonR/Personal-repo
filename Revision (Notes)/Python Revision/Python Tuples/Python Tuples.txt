Tuples are used to store multiple items in a single variable.

A tuple is ordered, unchangeable, indexed and allows duplicate items.

Tuples are written in circle brackets.

Example:

myTuple = ("Joe", "Biden", "Nice")

print(myTuple)





To determine the amount of items in a tuple use the len() function

Example:

myTuple = ("Joe", "Biden", "Nice")

print(len(myTuple))






In order to make a tuple with only one item there has to be a comma after the item, or it will be considered not a tuple.

Example:

myTuple = ("Joe")

print(type(myTuple)) #Prints, <class 'str'> , this is because there is no comma after the item so it is insteas a string



myTuple = ("Joe",)

print(type(myTuple)) #Prints, <class 'tuple'>





Much like lists, tuples can contain multiple data types in the same tuple and can contain int, str, and bool for example.

Example:

myTupleStr = ("Joe",)

myTuple2Int = (12, 13)

myTuple3Bool = (True, False, True)

myTupleMix = ("Joe", 12, 13, True, False, True)




Tuples are considered by python to be a object with the data type of tuple.

Example:

myTuple = ("Joe", "Biden")

print(type(myTuple)) #Prints, <class 'tuple'>




It is also possible to use the tuple() constructor in order to make tuples.

Example:

myTuple = tuple(["Joe", "Biden", "Nice"])

print(type(myTuple)) #Prints, <class 'tuple'> , using this constructor we can turn a list into a tuple



myTuple = tuple("Joe")

print(type(myTuple)) #Prints, <class 'tuple'>

print(myTuple) #Prints, ('J', 'o', 'e')



myList = ["Joe", "Biden", "Nice"]

myTuple = tuple(myList)

print(myTuple) #Prints, ('Joe', 'Biden', 'Nice')






